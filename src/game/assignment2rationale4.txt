Changes:
    - There is no WalkBehaviour, instead the functionality already provided is used. There is
      no need for WalkBehaviour.
    - JumpBehaviour also inherits Action, because 
    - ConsumeSuperMushroomAction and ConsumePowerStarAction are new Actions
      for handling the consumption of the items.
    - The adding of the effects to Player are now done by two methods: addPowerStarEffect()
      and addSuperMushroomEffect().
    - Coin has no more relationship with PowerStar, to better follow separation of concerns.


Current implementation for consuming items and Player gaining the effects:
    - Have a Consume<Item>Action for each consumable item.
        - This will trigger addSuperMushroomEffect() or addPowerStarEffect() in Player.
        - A new Consume<Item>Action will have to be made for every new consumable item, which
          follows SRP but is tedious. Another implementation was considered to solve 
          this (see below) but was not implemented.
    - Printing the action to menu will be done by Items.addAction().
        - There might unfortunately be multiple identical prints to the menu.

Considered implementation for consuming items and Player gaining the effects:
(We have considered a better implementation that follows more principles, but 
doing so it was not possible to fulfill one of the requirements.)

    - Have an interface Consumable, implementing a method consume().
        - All consumable items would implement this interface.
        - The method consume() will handle all the item's effects of consumption
          to Player, and be implemented in the item's class itself, hence following SRP.

    - A ConsumeAction(ConsumableItem) will handle the consuming for all ConsumableItems.
        - calls ConsumableItem.consume() and removes the item from Player's inventory.
        - This follows OCP, as there is no need to add any new code should more ConsumableItems
          be added.
        
    Due to Actor.setDisplayChar() being protected and final, it can only be used in Player and
    hence this implementation was not possible.

Principles:
    SRP:
    - ConsumeSuperMushroomAction and ConsumePowerStarAction both only handle their own
      respective items' consumption and its effects on Player.

    LSP:
    - In Player, the hurt() method overrides its super and calls a method to remove
      SuperMushroom effects. However, the return type is still the same. It will not
      cause any unexpected behaviour if Player is replaced by Actor.

    










